import { useState, useEffect, useContext } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import auth from '../assets/auth'
import { Center, Heading, VStack, Box, HStack, Spacer } from '@chakra-ui/react'
import styles from '../styles/Home.module.css'
import GuestLayout from '../layouts/GuestLayout'
import '@hassanmojab/react-modern-calendar-datepicker/lib/DatePicker.css'
import { Calendar } from '@hassanmojab/react-modern-calendar-datepicker'
import { Divider } from '@chakra-ui/react'
import type { DayValue } from '@hassanmojab/react-modern-calendar-datepicker'
import type { NextPageWithLayout } from './_app'
import axios from 'axios'
import type { Stripe } from 'stripe'
import PriceCard from '../components/Cards/PriceCard'
import { UserContext } from '../context'
import { StripeSubscription } from '../types/stripe/subscription'

const Home: NextPageWithLayout = () => {
  const [state] = useContext(UserContext)
  const router = useRouter()
  // console.log('router info', router)
  const [prices, setPrices] = useState([])
  const [userSubscriptions, setUserSubscriptions] = useState<string[]>([])
  const fetchPrices = async () => {
    const { data } = await axios.get('/api/subscriptions/prices')
    console.log('Getting Prices', data)
    setPrices(data)
  }

  const handleClick = async (
    e: React.MouseEvent<HTMLElement, MouseEvent>,
    price: Stripe.Price
  ) => {
    e.preventDefault()
    if (userSubscriptions && userSubscriptions.includes(price.id)) {
      router.push(`/${price.nickname?.toLowerCase()}`)
      return
    }
    // console.log("Plan was clicked. price_id is", price.id);
    if (state && state.token) {
      const { data } = await axios.post('api/checkout/create', {
        priceId: price.id,
      })
      // console.log("Subscription was created", data);
      window.open(data, '_self')
    } else {
      router.push('/register')
    }
  }

  useEffect(() => {
    let result: string[] = []
    const check = () =>
      state &&
      state.user &&
      state.user.subscriptions &&
      state.user.subscriptions.map((sub: StripeSubscription) => {
        result.push(sub.plan.id)
      })
    check()
    setUserSubscriptions(result)
  }, [state && state.user])

  var today = new Date()
  const defaultValue = {
    year: today.getFullYear(),
    month: today.getMonth(),
    day: today.getDate(),
  }
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)
  const [selectedDay, setSelectedDay] = useState<DayValue>(defaultValue)

  useEffect(() => {
    const authStatus = new auth()
    authStatus.checkAuthStatus(setIsLoggedIn)
    fetchPrices()
  }, [])

  let items = []
  for (let i = 1; i <= 100; i++) {
    items.push(
      <li key={i} className='rounded bg-green-500 m-3'>
        <Center>Event {i}</Center>
      </li>
    )
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Diary</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <HStack>
        {/* <div className='grid grid-cols-4 gap-16 max-h-screen'> */}
        <VStack>
          {/* <div className='col-start-1 col-end-2'> */}
          <Heading as='h1' fontSize='30px'>
            Optimize Your Life!
          </Heading>
          <Calendar
            value={selectedDay}
            onChange={setSelectedDay}
            shouldHighlightWeekends
          />
          {/* </div> */}
        </VStack>

        <Divider orientation='vertical' borderColor={'red'} />
        <Spacer />

        <div className='col-start-3 col-end-4 w-100'>
          <Center>
            <VStack>
              <Heading as='h1' fontSize='30px'>
                Diary
              </Heading>
              {isLoggedIn ? (
                <div>
                  <Heading as='h2' fontSize='20px'>
                    This is for loggedInUser
                  </Heading>
                  <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                    <ul className='max-w-sm max-h-screen rounded shadow-lg'>
                      {items}
                    </ul>
                  </Box>
                </div>
              ) : (
                <div>
                  <Heading as='h2' fontSize='20px'>
                    This is for Guest User
                  </Heading>
                  <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                    Chose your Plan
                    {prices &&
                      prices.map((price: Stripe.Price) => (
                        <PriceCard
                          key={price.id}
                          price={price}
                          handleSubscription={handleClick}
                          userSubscriptions={userSubscriptions}
                        />
                      ))}
                  </Box>
                </div>
              )}
            </VStack>
          </Center>
        </div>
        <Spacer />
      </HStack>
    </div>
    // </div>
  )
}

export default Home

Home.layout = (page) => <GuestLayout>{page}</GuestLayout>
