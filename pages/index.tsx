import { useState, useEffect, useContext, useRef } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { AuthContext } from '../context/index'
import PriceCard from '../components/Cards/PriceCard'
import axios from 'axios'
import styles from '../styles/Home.module.css'
import {
  Center,
  Heading,
  VStack,
  Box,
  HStack,
  Spacer,
  Button,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  FormControl,
  FormLabel,
  Input,
} from '@chakra-ui/react'
import { Calendar } from '@hassanmojab/react-modern-calendar-datepicker'
import '@hassanmojab/react-modern-calendar-datepicker/lib/DatePicker.css'
import { Divider } from '@chakra-ui/react'
import type { DayValue } from '@hassanmojab/react-modern-calendar-datepicker'
import type { NextPageWithLayout } from './_app'
import type { Stripe } from 'stripe'
import type { AuthContextType } from '../context/index'
import type { StripeSubscriptionStatus } from '../types/stripe/subscription'
import AuthLayout from '../layouts/AuthLayout'

const Home: NextPageWithLayout = () => {
  var today = new Date()
  const defaultValue = {
    year: today.getFullYear(),
    month: today.getMonth(),
    day: today.getDate(),
  }
  const router = useRouter()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const initialRef = useRef(null)
  const [state, setState] = useContext<AuthContextType>(AuthContext)
  // console.log('state define in page/index.js:\n%o', state)
  const [prices, setPrices] = useState<Stripe.Price[]>([])
  const [userSubscriptions, setUserSubscriptions] = useState<string[]>([])
  const [status, setStatus] = useState<StripeSubscriptionStatus[]>([])
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)
  const [isSubscribed, setIsSubscribed] = useState<boolean>(false)
  const [selectedDay, setSelectedDay] = useState<DayValue>(defaultValue)
  const [time, setTime] = useState('12:00')

  // console.log('router info', router)
  // console.log('This use is', state.user.loggedInUser)

  // const checkObjctKey = (obj: Object) => {
  //   const isExists =
  //     obj.hasOwnProperty('STANDARD_MONTHLY') ||
  //     obj.hasOwnProperty('STANDARD_YEARLY') ||
  //     obj.hasOwnProperty('PREMIUM_MONTHLY') ||
  //     obj.hasOwnProperty('PREMIUM_YEARLY')
  //   return isExists
  // }

  // const checkIsActive = () => {
  //   const isActive = state.user.subscriptions.map((obj: Object) => {
  //     const values = Object.values(obj)
  //     const isActive = values.includes('active') || values.includes('trial')
  //     return isActive
  //   })
  //   return isActive
  // }

  const handleClick = async (
    e: React.MouseEvent<HTMLElement, MouseEvent>,
    price: Stripe.Price
  ) => {
    e.preventDefault()
    if (userSubscriptions && userSubscriptions.includes(price.id)) {
      router.push(`/${price.nickname?.toLowerCase()}`)
      return
    }
    // console.log('Plan was clicked. price_id is', price.id)
    if (state.user.loggedInUser) {
      // console.log(state.user.stripe_customer_id)
      const { data } = await axios.post('api/checkout/create', {
        priceId: price.id,
        stripe_customer_id: state.user.stripe_customer_id,
      })
      // console.log('Subscription was created', data)
      window.open(data, '_self')
    } else {
      router.push('/register')
    }
  }

  useEffect(() => {
    // console.log('page index is mounted.')
    // console.log('useEffect is called in page/index.js:\n%o', state)
    // console.log(`state.user.subscriptions:\n%o`, state.user)
    // Please fixe a bug about getting cookie's data.
    if (!state.user.loggedInUser) {
      // console.log('Please login')
      router.replace('/login')
    } else if (
      state.user.loggedInUser &&
      state.user.stripe_customer_id &&
      state.user.subscriptions.length !== 0
    ) {
      // console.log('set Login and Subscribe')
      setIsLoggedIn(true)
      setIsSubscribed(true)
    } else {
      router.push('/landing')
    }
  }, [
    state.user.loggedInUser,
    state.user.stripe_customer_id,
    state.user.subscriptions,
  ])

  let items = []
  for (let i = 1; i <= 100; i++) {
    items.push(
      <li key={i} className='rounded bg-green-500 m-3'>
        <Center>Event {i}</Center>
      </li>
    )
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Diary</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <HStack>
        {isLoggedIn && isSubscribed ? (
          <>
            <Spacer />
            <VStack>
              <Heading as='h1' fontSize='30px'>
                Optimize Your Life!
              </Heading>
              <Calendar
                value={selectedDay}
                onChange={setSelectedDay}
                shouldHighlightWeekends
              />
              <>
                <Button className='bg-green-500' size='lg' onClick={onOpen}>
                  Register your events.
                </Button>
                <Modal
                  isOpen={isOpen}
                  onClose={onClose}
                  initialFocusRef={initialRef}
                  isCentered
                >
                  <ModalOverlay />
                  <ModalContent>
                    <ModalHeader>Add Event</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                      <HStack>
                        <VStack>
                          <FormControl>
                            <FormLabel>Title</FormLabel>
                            <Input ref={initialRef} placeholder='Title' />
                          </FormControl>

                          <FormControl mt={4}>
                            <FormLabel>Description </FormLabel>
                            <Input placeholder='Description' />
                          </FormControl>
                        </VStack>
                      </HStack>
                    </ModalBody>

                    <ModalFooter>
                      <Button variant='ghost' className='bg-green-500'>
                        Secondary Action
                      </Button>
                    </ModalFooter>
                  </ModalContent>
                </Modal>
              </>
            </VStack>
          </>
        ) : null}

        <Divider orientation='vertical' borderColor={'red'} />
        <Spacer />

        <div className='col-start-3 col-end-4 w-100'>
          <VStack>
            <Heading as='h1' fontSize='30px'>
              Diary
            </Heading>

            {isLoggedIn && isSubscribed ? (
              <div>
                <Heading as='h2' fontSize='20px'>
                  This is for loggedInUser
                </Heading>
                <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                  <ul className='max-w-sm max-h-screen rounded shadow-lg'>
                    {items}
                  </ul>
                </Box>
              </div>
            ) : (
              <div>
                <Center>
                  <VStack>
                    <Heading as='h2' fontSize='20px'>
                      This is for Guest User
                    </Heading>
                    <Heading as='h3' fontSize='20px'>
                      Chose your Plan
                    </Heading>
                  </VStack>
                </Center>
                <Center>
                  <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                    <HStack>
                      {prices &&
                        prices.map((price: Stripe.Price) => (
                          <PriceCard
                            key={price.id}
                            price={price}
                            handleSubscription={handleClick}
                            // userSubscriptions={userSubscriptions}
                          />
                        ))}
                    </HStack>
                  </Box>
                </Center>
              </div>
            )}
          </VStack>
        </div>
        <Spacer />
      </HStack>
    </div>
  )
}

export default Home

Home.layout = (page) => <AuthLayout>{page}</AuthLayout>
