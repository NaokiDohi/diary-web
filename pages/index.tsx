import { useState, useEffect, useContext } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { AuthContext } from '../context/index'
import PriceCard from '../components/Cards/PriceCard'
import GuestLayout from '../layouts/GuestLayout'
import axios from 'axios'
import styles from '../styles/Home.module.css'
import { Center, Heading, VStack, Box, HStack, Spacer } from '@chakra-ui/react'
import { Calendar } from '@hassanmojab/react-modern-calendar-datepicker'
import '@hassanmojab/react-modern-calendar-datepicker/lib/DatePicker.css'
import { Divider } from '@chakra-ui/react'
import type { DayValue } from '@hassanmojab/react-modern-calendar-datepicker'
import type { NextPageWithLayout } from './_app'
import type { Stripe } from 'stripe'
import type { AuthContextType } from '../context/index'
import type { StripeSubscription } from '../types/stripe/subscription'

const Home: NextPageWithLayout = () => {
  var today = new Date()
  const defaultValue = {
    year: today.getFullYear(),
    month: today.getMonth(),
    day: today.getDate(),
  }
  const router = useRouter()
  const [state, setState] = useContext<AuthContextType>(AuthContext)
  const [prices, setPrices] = useState([])
  const [userSubscriptions, setUserSubscriptions] = useState<string[]>([])
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false)
  const [selectedDay, setSelectedDay] = useState<DayValue>(defaultValue)
  // console.log('router info', router)
  // console.log('This use is', state.user.loggedInUser)

  const fetchPrices = async () => {
    const { data } = await axios.get('/api/subscriptions/prices')
    console.log('Getting Prices', data)
    setPrices(data)
  }

  const handleClick = async (
    e: React.MouseEvent<HTMLElement, MouseEvent>,
    price: Stripe.Price
  ) => {
    e.preventDefault()
    if (userSubscriptions && userSubscriptions.includes(price.id)) {
      router.push(`/${price.nickname?.toLowerCase()}`)
      return
    }
    // console.log('Plan was clicked. price_id is', price.id)
    if (state.user.loggedInUser) {
      const { data } = await axios.post('api/checkout/create', {
        priceId: price.id,
      })
      // console.log("Subscription was created", data);
      window.open(data, '_self')
    } else {
      router.push('/register')
    }
  }

  // useEffect(() => {
  //   let result: string[] = []
  //   const check = () =>
  //     state &&
  //     state.user &&
  //     state.user.subscriptions &&
  //     state.user.subscriptions.map((sub: StripeSubscription) => {
  //       result.push(sub.plan.id)
  //     })
  //   check()
  //   setUserSubscriptions(result)
  // }, [state && state.user])

  useEffect(() => {
    if (state.user.loggedInUser) {
      setIsLoggedIn(true)
    } else {
      fetchPrices()
    }
  }, [state.user.loggedInUser])

  let items = []
  for (let i = 1; i <= 100; i++) {
    items.push(
      <li key={i} className='rounded bg-green-500 m-3'>
        <Center>Event {i}</Center>
      </li>
    )
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Diary</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <HStack>
        {isLoggedIn ? (
          <>
            <Spacer />
            <VStack>
              <Heading as='h1' fontSize='30px'>
                Optimize Your Life!
              </Heading>
              <Calendar
                value={selectedDay}
                onChange={setSelectedDay}
                shouldHighlightWeekends
              />
              {/* </div> */}
            </VStack>
          </>
        ) : null}

        <Divider orientation='vertical' borderColor={'red'} />
        <Spacer />

        <div className='col-start-3 col-end-4 w-100'>
          <VStack>
            <Heading as='h1' fontSize='30px'>
              Diary
            </Heading>

            {isLoggedIn ? (
              <div>
                <Heading as='h2' fontSize='20px'>
                  This is for loggedInUser
                </Heading>
                <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                  <ul className='max-w-sm max-h-screen rounded shadow-lg'>
                    {items}
                  </ul>
                </Box>
              </div>
            ) : (
              <div>
                <Heading as='h2' fontSize='20px'>
                  This is for Guest User
                </Heading>
                <Center>
                  <Box overflowY='auto' maxWidth='800px' maxHeight='500px'>
                    Chose your Plan
                    <HStack>
                      {prices &&
                        prices.map((price: Stripe.Price) => (
                          <PriceCard
                            key={price.id}
                            price={price}
                            handleSubscription={handleClick}
                            userSubscriptions={userSubscriptions}
                          />
                        ))}
                    </HStack>
                  </Box>
                </Center>
              </div>
            )}
          </VStack>
        </div>
        <Spacer />
      </HStack>
    </div>
  )
}

export default Home

Home.layout = (page) => <GuestLayout>{page}</GuestLayout>
